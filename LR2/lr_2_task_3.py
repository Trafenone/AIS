# -*- coding: utf-8 -*-
"""LR_2_task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XFsNZCL1h6BZw6AJreJkqt-CpiqTl2fu
"""

from sklearn.datasets import load_iris

# Завантаження набору даних Iris
iris_data = load_iris()

# Перегляд ключових елементів набору даних
print("Ключі набору даних iris_data:\n{}".format(iris_data.keys()))

# Виведення частини опису набору даних
print(iris_data['DESCR'][:193] + "\n...")

# Перегляд назв класів ірисів, які потрібно передбачити
print("Назви класів:\n{}".format(iris_data['target_names']))

# Виведення назв ознак для кожного зразка
print("Назви ознак:\n{}".format(iris_data['feature_names']))

# Перевірка типу масиву з даними
print("Тип масиву даних: {}".format(type(iris_data['data'])))

# Перегляд форми масиву даних
print("Розміри масиву даних:\n{}".format(iris_data['data'].shape))

# Виведення значень перших п'яти зразків для кожної ознаки
print("Значення ознак для перших 5 зразків:\n{}".format(iris_data['data'][:5]))

# Перевірка типу масиву з цілями (відповідями)
print("Тип масиву цілей: {}".format(type(iris_data['target'])))

# Виведення відповідей у вигляді числових значень (класи ірисів)
print("Цільові значення (класи):\n{}".format(iris_data['target']))

# Імпортування необхідних бібліотек
from pandas import read_csv
from pandas.plotting import scatter_matrix
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

# Завантаження даних з URL
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/iris.csv"
columns = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
data = read_csv(url, names=columns)

# Перевірка форми датасету (кількість записів та атрибутів)
print("Розміри датасету (кількість екземплярів та атрибутів):", data.shape)

# Виведення перших 20 записів
print("\nПерші 20 записів у датасеті:")
print(data.head(20))

# Зведена статистика по кожному атрибуту
print("\nСтатистичні показники для кожного атрибуту:")
print(data.describe())

# Розподіл даних за категоріями в атрибуті 'class'
print("\nРозподіл по класах:")
print(data.groupby('class').size())

# КРОК 2. Візуалізація даних
# Створення діаграм розмаху для кожного з атрибутів
data.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.suptitle("Діаграми розмаху для атрибутів")
plt.show()

# Побудова гістограм для кожного атрибуту
data.hist()
plt.suptitle("Гістограма розподілу атрибутів")
plt.show()

# Побудова матриці діаграм розсіювання
scatter_matrix(data)
plt.suptitle("Матриця діаграм розсіювання атрибутів")
plt.show()

from sklearn.model_selection import train_test_split

# Перетворення даних на масив NumPy
data_array = data.values

# Вибір перших чотирьох стовпців для ознак (X)
X = data_array[:, 0:4]

# Вибір п'ятого стовпця для цільових значень (y)
y = data_array[:, 4]

# Розподіл даних на навчальний (X_train, y_train) та валідаційний (X_validation, y_validation) набори
X_train, X_validation, Y_train, Y_validation = train_test_split(X, y, test_size=0.20, random_state=1)

# Виведення розмірів наборів даних
print(f"Розмір навчальної вибірки: {X_train.shape}")
print(f"Розмір валідаційної вибірки: {X_validation.shape}")

# Імпортуємо необхідні модулі
from sklearn.linear_model import LogisticRegression
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.model_selection import StratifiedKFold, cross_val_score
from matplotlib import pyplot

# Ініціалізуємо список для моделей
models = []
models.append(('LR', LogisticRegression(solver='liblinear', multi_class='ovr')))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC(gamma='auto')))

# Оцінка ефективності кожної моделі
results = []
names = []
for name, model in models:
    # Застосовуємо 10-кратну крос-валідацію
    kfold = StratifiedKFold(n_splits=10, random_state=1, shuffle=True)
    cv_results = cross_val_score(model, X_train, Y_train, cv=kfold, scoring='accuracy')

    # Зберігаємо результати
    results.append(cv_results)
    names.append(name)

    # Виводимо середнє значення точності та стандартне відхилення
    print(f'{name}: {cv_results.mean():.6f} ({cv_results.std():.6f})')

# Створюємо діаграму розмаху для порівняння точності різних моделей
pyplot.boxplot(results, labels=names)
pyplot.title('Порівняння алгоритмів')
pyplot.show()

# Створюємо прогноз на контрольній вибірці
model = SVC(gamma='auto')
model.fit(X_train, Y_train)
predictions = model.predict(X_validation)

# Оцінюємо прогноз
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

# Завантажуємо набір даних Iris
iris_data = load_iris()
X = iris_data.data
y = iris_data.target

# Розподіл даних на тренувальний та тестовий набори
X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=0.3, random_state=42)

# Створюємо модель KNN та навчаємо її
knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train, y_train)

# Новий зразок (ірис з довжиною чашолистка 5 см, шириною чашолистка 2.9 см, довжиною пелюстки 1 см і шириною пелюстки 0.2 см)
X_sample = np.array([[5, 2.9, 1, 0.2]])

# Прогноз для нового зразка
prediction_result = knn_model.predict(X_sample)

# Виводимо форму масиву нового зразка, прогноз та відповідну мітку
print("Розміри масиву X_sample: {}".format(X_sample.shape))
print("Прогноз: {}".format(prediction_result))
print("Спрогнозована категорія: {}".format(iris_data['target_names'][prediction_result]))